package org.drools.chance.ec;

 
import java.util.Date;
import java.util.Map;
import org.drools.chance.factmodel.Imperfect;
import org.drools.chance.degree.Degree;
import org.drools.chance.distribution.fuzzy.linguistic.Linguistic;




declare Event
	@role( event )
	@timestamp( start )

	start : long
end

declare Initially extends Event
	@role(event)
	@timestamp(start)

	start : long
end




declare Clip
	@role(event)
	@timestamp(start)

	start  : long
	event  : Event
	fluent : Fluent
	degree : Degree
end

declare Declip
	@role(event)
	@timestamp(start)

	start  : long
	event  : Event
	fluent : Fluent
	degree : Degree
end

declare Fluent
    id     : String     @key
	event  : Event
	status : Boolean = "true/0.0"
        @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
    hist   : Map
    mvi    : MVII
end

declare MVII
    @role( event )
    @timestamp( start )
    @duration( extent )

	start  : long
	finish : long    = Long.MAX_VALUE
	extent : long    = Long.MAX_VALUE
	status : Boolean = "true/0.0"
        @Imperfect( kind=ImpKind.PROBABILITY, type=ImpType.BASIC, degree=DegreeType.SIMPLE )
    flId   : String
    type   : Class
end

declare MuEntry
    time   : long
    mu     : Degree
end



query holds( Fluent $f )
	$f := Fluent( status == true )
end

query holdsNow( Fluent $f )
	$f := Fluent( status ~== true )
end

query holdsAt( Fluent $f, Long $t )
	$f := Fluent( $h : hist )
	      MuEntry( mu ~holds true ) from $h[$t]
end

//query holdsFor( Fluent $f, Long $start, Long $end )
//	$f := Fluent( $h : hist )
//	      exists MuEntry( time >= $start, time <= $end, degree ~holds true ) from $h.values()
//end




rule "OnClip - Fluent Down"
salience 10
dialect "mvel"
when
    $c : Clip( $fluent : fluent, $ev : event, $deg : degree )
    $f : Fluent( this == $fluent, $mvi : mvi == null )
then
    retract( $c );
end


rule "OnClip"
dialect "mvel"
when
    $c : Clip( $fluent : fluent, $ev : event, $deg : degree )
    $f : Fluent( this == $fluent, $mvi : mvi != null, $beg : mvi.start )
then
    retract( $c );

    modify ( $mvi ) {
        status.update( true, $deg, "operator=MINUS", "family=GODEL" );
    }
//    System.out.println( "After the effect of a klip on " + $f + ", the mvi is " + $mvi.getStatusDistr().get( true ) );

    modify( $f ) {
        setEvent( $ev ),
        hist.put( $ev.start, new MuEntry( $ev.start, $f.statusDistr.get( true ) ) ),
        status.setValue( true, $deg );
    }
end



rule "OnClip Off"
dialect "mvel"
when
    $f : Fluent( $ev : event != [cut] null, $mvi : mvi ~!= [ cut ] null, $beg : mvi.start, mvi.status ~ not holds [family=GODEL] true )
then
//    System.out.println(" OFFICIAL THE MVI for " + $f + "  STOPPED TO HOLD" + chance.getDegree() );

    modify ( $mvi ) {
        finish = $ev.start,
        extent = $ev.start - $beg;
    }

    modify( $f ) {
        mvi = null ,
        status.setValue( true, chance.getDegree().False() );
    }
end



rule "OnDeClip - MVI"
salience 10
dialect "mvel"
when
    $d : Declip( $fluent : fluent, $ev : event, $deg : degree )
    $f : Fluent( this == $fluent, mvi == null )
then

    MVII mvii = new MVII();
        mvii.start = $ev.start;
        mvii.flId  = $f.getId();
        mvii.type = $f.class;

    modify( $f ) {
        mvi = mvii;
    }
    insert( mvii );
end

rule "OnDeClip"
no-loop
dialect "mvel"
when
    $d : Declip( $fluent : fluent, $ev : event, $deg : degree )
    $f : Fluent( this == $fluent, $mvi : mvi != null )
then
    retract( $d );

    modify ( $mvi ) {
        status.update( true, $deg, "operator=OR", "family=GODEL" );
    }

    modify( $f ) {
        event = $ev,
        hist.put( $ev.start, new MuEntry( $ev.start, $f.statusDistr.get( true ) ) ),
        status.setValue( true, $d.getDegree() );
    }
end



rule "Clean MVII"
when
    $m : MVII( $flid : flId )
    not  Fluent( id == $flid )
then
    retract( $m );
end